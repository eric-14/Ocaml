

let n = read_int() 

let () = 
let p = ref 0 in 
for k = 1 to n do 
  let x = Random.float 1.0 in (* variable 1.0 defines the range of values generated by the Random.float function *)
  let y = Random.float 1.0 in 
  if x *. x +. y *. y <= 1.0 then (* if x and y lie within the quarter of the circle increase the value of p *)
    p := !p + 1   (* unary operator ! is used to retrieve the value of the reference p. If p is a reference of type int the !p is of type int *)
done; 
(* expression sequence evaluation of expressions  by side effects. For it to be accepted by Ocaml it must only evaluate expression by side effects and not return a value *)

let pi = 4.0 *. float !p /. float n in (* conversion of !p and n to floats and return the value of pi*)
Printf.printf "%f\n" pi 

(*
NOTES 


let () - is used to evaluate the expression that modify their variables. Formally called computing by side effects 

in - defines the scopt of use of the variable p 

reference defined in the Ocaml Stdlib used to declare a memory cell in this case of type int. Read as reference containing a type int
  

Essentially the above expression use monte carlo method (random sampling) to check whether points lie within a circle 
and by multipling the ratio of number of points in the circle to the total number of points by a factor of 4 
you essentially get PI

*)